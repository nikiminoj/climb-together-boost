// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://mcbuxkyofjngibhxvxvk.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1jYnV4a3lvZmpuZ2liaHh2eHZrIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI3Mzk1OTcsImV4cCI6MjA2ODMxNTU5N30.tf85GEz3hzdQ9fdGht4ocryRayGV67mu5xh_iJe9uv4";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    storage: localStorage,
    persistSession: true,
    autoRefreshToken: true,
  }
});

// Real-time subscription for new notifications
supabase
  .channel('notifications')
  .on('postgres_changes', { event: 'INSERT', schema: 'public', table: 'notifications' }, payload => {
    console.log('New notification received:', payload.new);
    // TODO: Integrate with useNotifications hook to update UI
    // This could involve emitting an event or invalidating the query.
  })
  .subscribe();




/**
 * Retrieves all notifications from the database, ordered by most recent first.
 *
 * @returns An array of notification objects, or an empty array if an error occurs
 */
export async function getNotifications(userId: string) {
  const { data, error } = await supabase
    .from('notifications')
 .eq('user_id', userId)
    .select('*')
    .order('created_at', { ascending: false });

  if (error) {
    console.error('Error fetching notifications:', error);
    return [];
  }

  return data;
}

/**
 * Marks a notification as read by updating its status in the database.
 *
 * @param notificationId - The unique identifier of the notification to mark as read
 * @returns True if the notification was successfully marked as read; otherwise, false
 */
export async function markNotificationAsRead(notificationId: string, userId: string) {
  const { data, error, count } = await supabase
    .from('notifications')
    .update({ read: true })
    .eq('id', notificationId)
    .eq('user_id', userId) // Add user validation
    .select(); // Select to get data back and check for success

  if (error) {
    console.error(`Error marking notification ${notificationId} as read:`, error);
    return false;
  }
  
  // Check if any rows were updated. Supabase update returns an array of updated rows or an empty array if none were updated.
  return data !== null && data.length > 0;
}

/**
 * Deletes a notification from the database by its ID.
 *
 * @param notificationId - The unique identifier of the notification to delete
 * @returns True if the notification was successfully deleted; otherwise, false
 */
export async function deleteNotification(notificationId: string) {
  const { error } = await supabase
    .from('notifications')
    .delete()
    .eq('id', notificationId);

  if (error) {
    console.error(`Error deleting notification ${notificationId}:`, error);
    return false;
  }

  return true;
}